{% extends 'base.html.twig' %}


{% block body %}
    {#<div class="ui-widget">
        <label for="tags">Tag programming languages: </label>
        <input id="tags" size="50">
    </div>#}
    {% form_theme form '@App/Form/fields.html.twig' %}
    {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}

    {{ form_row(form.name) }}
    {{ form_row(form.groups) }}

    <h3>Steps</h3>
    <ul class="steps" data-prototype="{{ form_widget(form.steps.vars.prototype)|e }}">
        {% for step in form.steps %}
            <li>{{ loop.index }}</li>
            <li>{{ form_row(step.name) }}</li>
            <li>{{ form_row(step.groups) }}</li>
            <li>{{ form_row(step.function) }}</li>
            <li>{{ form_row(step.previous) }}</li>
            <li>{{ form_row(step.duration) }}</li>
        {% endfor %}
    </ul>
    {% do form.steps.setRendered %}
    {{ form_end(form) }}
{% endblock %}
{% block javascripts %}
    <script type="text/javascript">
        var $collectionHolder;

        // setup an "add a step" link
        var $addStepLink = $('<a href="#" class="add_step_link">Add a step</a>');
        var $newLinkLi = $('<li></li>').append($addStepLink);

        jQuery(document).ready(function() {
            // Get the ul that holds the collection of steps
            $collectionHolder = $('ul.steps');

            // add a delete link to all of the existing step form li elements
            $collectionHolder.find('li').each(function() {
                addStepFormDeleteLink($(this));
            });

            // add the "add a step" anchor and li to the steps ul
            $collectionHolder.append($newLinkLi);

            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            $collectionHolder.data('index', $collectionHolder.find(':input').length);

            $addStepLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // add a new step form (see next code block)
                addStepForm($collectionHolder, $newLinkLi);
            });
        });
        function addStepForm($collectionHolder, $newLinkLi) {
            // Get the data-prototype explained earlier
            var prototype = $collectionHolder.data('prototype');

            // get the new index
            var index = $collectionHolder.data('index');

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            var newForm = prototype.replace(/__name__/g, index);

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a step" link li
            var $newFormLi = $('<li></li>').append(index+newForm);
            $newLinkLi.before($newFormLi);

            // add a delete link to the new form
            addStepFormDeleteLink($newFormLi);
        }

        function addStepFormDeleteLink($stepFormLi) {
            var $removeFormA = $('<a href="#">delete this step</a>');
            $stepFormLi.append($removeFormA);

            $removeFormA.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // remove the li for the step form
                $stepFormLi.remove();
            });
        }
    </script>
    {#<script>
        $(function() {
            var availableTags = {{ users|json_encode|raw }};
            function split( val ) {
                return val.split( /,\s*/ );
            }
            function extractLast( term ) {
                return split( term ).pop();
            }

            $( "#workflow_name" )
                // don't navigate away from the field on tab when selecting an item
                    .bind( "keydown", function( event ) {
                        if ( event.keyCode === $.ui.keyCode.TAB &&
                                $( this ).autocomplete( "instance" ).menu.active ) {
                            event.preventDefault();
                        }
                    })
                    .autocomplete({
                        minLength: 0,
                        source: function( request, response ) {
                            // delegate back to autocomplete, but extract the last term
                            response( $.ui.autocomplete.filter(
                                    availableTags, extractLast( request.term ) ) );
                        },
                        focus: function() {
                            // prevent value inserted on focus
                            return false;
                        },
                        select: function( event, ui ) {
                            var terms = split( this.value );
                            // remove the current input
                            terms.pop();
                            // add the selected item
                            terms.push( ui.item.value );
                            // add placeholder to get the comma-and-space at the end
                            terms.push( "" );
                            this.value = terms.join( ", " );
                            return false;
                        }
                    });
        });
    </script>#}

{% endblock %}