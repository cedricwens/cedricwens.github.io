<?php
/**
 * Created by PhpStorm.
 * User: Cedric Wens
 * Date: 23/02/2015
 * Time: 14:29
 */

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\JoinColumn;
use Doctrine\ORM\Mapping\ManyToMany;
use Doctrine\ORM\Mapping\ManyToOne;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 * @ORM\Table(name="group_groups")
 */
class GroupGroups {
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ManyToOne(targetEntity="AppBundle\Entity\Group", inversedBy="groupChilds")
     * @JoinColumn(name="group_child", referencedColumnName="id")
     **/
    protected $children;

    /**
     * @ManyToOne(targetEntity="AppBundle\Entity\Group", inversedBy="groupParents")
     * @JoinColumn(name="group_parent", referencedColumnName="id")
     **/
    protected $parents;

    /**
     * @ORM\Column(type="array")
     */
    protected $roles;

    public function __construct()
    {
        $this->roles = array();
    }

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Add children
     *
     * @param \AppBundle\Entity\Group $children
     * @return GroupGroups
     */
    public function addChild(\AppBundle\Entity\Group $children)
    {
        $this->children[] = $children;

        return $this;
    }

    /**
     * Remove children
     *
     * @param \AppBundle\Entity\Group $children
     */
    public function removeChild(\AppBundle\Entity\Group $children)
    {
        $this->children->removeElement($children);
    }

    /**
     * Get children
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getChildren()
    {
        return $this->children;
    }

    /**
     * Add parents
     *
     * @param \AppBundle\Entity\Group $parents
     * @return GroupGroups
     */
    public function addParent(\AppBundle\Entity\Group $parents)
    {
        $this->parents[] = $parents;

        return $this;
    }

    /**
     * Remove parents
     *
     * @param \AppBundle\Entity\Group $parents
     */
    public function removeParent(\AppBundle\Entity\Group $parents)
    {
        $this->parents->removeElement($parents);
    }

    /**
     * Get parents
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getParents()
    {
        return $this->parents;
    }

    /**
     * Set role
     *
     * @param array $roles
     * @return $this
     */
    public function setRoles(array $roles)
    {
        $this->roles = array();

        foreach ($roles as $role) {
            $this->addRole($role);
        }

        return $this;
    }

    /**
     * Get userRoles
     *
     * @return array
     */
    public function getRoles()
    {
        return $this->roles;
    }

    /**
     * Add role
     * @param $roles
     * @return $this
     */
    public function addRole($role)
    {

        if (!in_array($role, $this->roles, true)) {
            $this->roles[] = $role;
        }

        return $this;
    }

    /**
     * Remove role
     * @param $role
     * @return $this
     */
    public function removeRole($role)
    {
        if (false !== $key = array_search($role, $this->roles, true)) {
            unset($this->roles[$key]);
            $this->roles = array_values($this->roles);
        }

        return $this;
    }

    public function removeAllRoles(){
        if ($this->roles) {
            foreach ($this->roles as $key => $value) {
                unset($this->roles[$key]);
            }
        }
        return $this;
    }

    /**
     * Set children
     *
     * @param \AppBundle\Entity\Group $children
     * @return GroupGroups
     */
    public function setChildren(\AppBundle\Entity\Group $children = null)
    {
        $this->children = $children;

        return $this;
    }

    /**
     * Set parents
     *
     * @param \AppBundle\Entity\Group $parents
     * @return GroupGroups
     */
    public function setParents(\AppBundle\Entity\Group $parents = null)
    {
        $this->parents = $parents;

        return $this;
    }
}
